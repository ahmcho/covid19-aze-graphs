{"version":3,"sources":["InfectedAll.js","InfectedToday.js","RecoveredAll.js","DeathsAll.js","TestsAll.js","TestsToday.js","DeathsToday.js","RecoveredToday.js","ActiveCases.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["InfectedAll","data","style","width","height","ResponsiveContainer","LineChart","margin","top","right","left","bottom","CartesianGrid","stroke","XAxis","dataKey","YAxis","Tooltip","wrapperStyle","backgroundColor","labelStyle","color","itemStyle","formatter","value","name","labelFormatter","moment","format","Legend","verticalAlign","Line","type","InfectedToday","RecoveredAll","DeathsAll","TestsAll","TestsToday","DeathsToday","RecoveredToday","ActiveCases","App","useState","chartData","setChartData","fetchData","a","axios","get","response","localStorage","setItem","JSON","stringify","console","error","useEffect","getItem","parse","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c2fb3039.chunk.js","sourcesContent":["import { LineChart, Line, CartesianGrid, XAxis, YAxis,Tooltip, Legend,ResponsiveContainer } from 'recharts';\nimport moment from 'moment';\n\nconst InfectedAll = ({data}) => (\n    <div style={{ width: \"100%\", height: 400 }}>\n      <ResponsiveContainer>\n          <LineChart width={500} height={300} data={data} margin={{ top: 20, right: 60, left: 30, bottom: 0 }}>\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"report_date\" />\n            <YAxis />\n            <Tooltip \n              wrapperStyle={{ backgroundColor: \"red\" }}\n              labelStyle={{ color: \"green\" }}\n              itemStyle={{ color: \"#664434\" }}\n              formatter={function(value, name) {\n                return `${value}`;\n              }}\n              labelFormatter={function(value) {\n                return `Tarix: ${moment(value).format('DD.MM.YYYY')}`;\n              }}\n            />\n            <Legend verticalAlign=\"top\" height={36}/>\n            <Line name=\"Ümumi yoluxanların sayı\" type=\"infected_all\" dataKey=\"infected_all\" stroke=\"#664434\" />\n            <Tooltip />\n          </LineChart>\n      </ResponsiveContainer>\n    </div>\n)\n\nexport default InfectedAll;","import { LineChart, Line, CartesianGrid, XAxis, YAxis,Tooltip, Legend,ResponsiveContainer } from 'recharts';\nimport moment from 'moment';\nconst InfectedToday = ({data}) => (\n    <div style={{ width: \"100%\", height: 400 }}>\n      <ResponsiveContainer>\n          <LineChart width={500} height={300} data={data} margin={{ top: 20, right: 60, left: 30, bottom: 0 }}>\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"report_date\" />\n            <YAxis />\n            <Tooltip \n              wrapperStyle={{ backgroundColor: \"red\" }}\n              labelStyle={{ color: \"green\" }}\n              itemStyle={{ color: \"#664434\" }}\n              formatter={function(value, name) {\n                return `${value}`;\n              }}\n              labelFormatter={function(value) {\n                return `Tarix: ${moment(value).format('DD.MM.YYYY')}`;\n              }}\n            />\n            <Legend verticalAlign=\"top\" height={36}/>\n            <Line name=\"Günlük yoluxanların sayı\" type=\"infected_today\" dataKey=\"infected_today\" stroke=\"#664434\" />\n            <Tooltip />\n          </LineChart>\n      </ResponsiveContainer>\n    </div>\n)\n\nexport default InfectedToday;","import { LineChart, Line, CartesianGrid, XAxis, YAxis,Tooltip, Legend,ResponsiveContainer } from 'recharts';\nimport moment from 'moment';\n\nconst RecoveredAll = ({data}) => (\n    <div style={{ width: \"100%\", height: 400 }}>\n      <ResponsiveContainer>\n          <LineChart width={500} height={300} data={data} margin={{ top: 20, right: 60, left: 30, bottom: 0 }}>\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"report_date\" />\n            <YAxis />\n            <Legend verticalAlign=\"top\" height={36}/>\n            <Line name=\"Ümumi sağalanların sayı\" type=\"recovered_all\" dataKey=\"recovered_all\" stroke=\"#664434\" />\n            <Tooltip \n              wrapperStyle={{ backgroundColor: \"red\" }}\n              labelStyle={{ color: \"green\" }}\n              itemStyle={{ color: \"#664434\" }}\n              formatter={function(value, name) {\n                return `${value}`;\n              }}\n              labelFormatter={function(value) {\n                return `Tarix: ${moment(value).format('DD.MM.YYYY')}`;\n              }}\n            />\n          </LineChart>\n      </ResponsiveContainer>\n    </div>\n)\n\nexport default RecoveredAll;","import { LineChart, Line, CartesianGrid, XAxis, YAxis,Tooltip, Legend,ResponsiveContainer } from 'recharts';\nimport moment from 'moment';\n\nconst DeathsAll = ({data}) => (\n    <div style={{ width: \"100%\", height: 400 }}>\n      <ResponsiveContainer>\n          <LineChart width={500} height={300} data={data} margin={{ top: 20, right: 60, left: 30, bottom: 0 }}>\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"report_date\" />\n            <YAxis />\n            <Legend verticalAlign=\"top\" height={36}/>\n            <Line name=\"Ümumi ölənlərin sayı\" type=\"deaths_all\" dataKey=\"deaths_all\" stroke=\"#664434\" />\n            <Tooltip \n              wrapperStyle={{ backgroundColor: \"red\" }}\n              labelStyle={{ color: \"green\" }}\n              itemStyle={{ color: \"#664434\" }}\n              formatter={function(value, name) {\n                return `${value}`;\n              }}\n              labelFormatter={function(value) {\n                return `Tarix: ${moment(value).format('DD.MM.YYYY')}`;\n              }}\n            />\n          </LineChart>\n      </ResponsiveContainer>\n    </div>\n)\n\nexport default DeathsAll;","import { LineChart, Line, CartesianGrid, XAxis, YAxis,Tooltip, Legend,ResponsiveContainer } from 'recharts';\nimport moment from 'moment';\n\nconst TestsAll = ({data}) => (\n    <div style={{ width: \"100%\", height: 400 }}>\n      <ResponsiveContainer>\n          <LineChart width={500} height={300} data={data} margin={{ top: 20, right: 60, left: 30, bottom: 0 }}>\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"report_date\" />\n            <YAxis />\n            <Legend verticalAlign=\"top\" height={36}/>\n            <Line name=\"Ümumi testlərin sayı\" type=\"tests_all\" dataKey=\"tests_all\" stroke=\"#664434\" />\n            <Tooltip \n              wrapperStyle={{ backgroundColor: \"red\" }}\n              labelStyle={{ color: \"green\" }}\n              itemStyle={{ color: \"#664434\" }}\n              formatter={function(value, name) {\n                return `${value}`;\n              }}\n              labelFormatter={function(value) {\n                return `Tarix: ${moment(value).format('DD.MM.YYYY')}`;\n              }}\n            />\n          </LineChart>\n      </ResponsiveContainer>\n    </div>\n)\n\nexport default TestsAll;","import { LineChart, Line, CartesianGrid, XAxis, YAxis,Tooltip, Legend,ResponsiveContainer } from 'recharts';\nimport moment from 'moment';\n\nconst TestsToday = ({data}) => (\n    <div style={{ width: \"100%\", height: 400 }}>\n      <ResponsiveContainer>\n          <LineChart width={500} height={300} data={data} margin={{ top: 20, right: 60, left: 30, bottom: 0 }}>\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"report_date\" />\n            <YAxis />\n            <Legend verticalAlign=\"top\" height={36}/>\n            <Line name=\"Günlük testlərin sayı\" type=\"tests_today\" dataKey=\"tests_today\" stroke=\"#664434\" />\n            <Tooltip \n              wrapperStyle={{ backgroundColor: \"red\" }}\n              labelStyle={{ color: \"green\" }}\n              itemStyle={{ color: \"#664434\" }}\n              formatter={function(value, name) {\n                return `${value}`;\n              }}\n              labelFormatter={function(value) {\n                return `Tarix: ${moment(value).format('DD.MM.YYYY')}`;\n              }}\n            />\n          </LineChart>\n      </ResponsiveContainer>\n    </div>\n)\n\nexport default TestsToday;","import { LineChart, Line, CartesianGrid, XAxis, YAxis,Tooltip, Legend,ResponsiveContainer } from 'recharts';\nimport moment from 'moment';\n\nconst DeathsToday = ({data}) => (\n    <div style={{ width: \"100%\", height: 400 }}>\n      <ResponsiveContainer>\n          <LineChart width={500} height={300} data={data} margin={{ top: 20, right: 60, left: 30, bottom: 0 }}>\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"report_date\" />\n            <YAxis />\n            <Tooltip \n              wrapperStyle={{ backgroundColor: \"red\" }}\n              labelStyle={{ color: \"green\" }}\n              itemStyle={{ color: \"#664434\" }}\n              formatter={function(value, name) {\n                return `${value}`;\n              }}\n              labelFormatter={function(value) {\n                return `Tarix: ${moment(value).format('DD.MM.YYYY')}`;\n              }}\n            />\n            <Legend verticalAlign=\"top\" height={36}/>\n            <Line name=\"Günlük ölənlərin sayı\" type=\"deaths_today\" dataKey=\"deaths_today\" stroke=\"#664434\" />\n          </LineChart>\n      </ResponsiveContainer>\n    </div>\n)\n\nexport default DeathsToday;","import { LineChart, Line, CartesianGrid, XAxis, YAxis,Tooltip, Legend,ResponsiveContainer } from 'recharts';\nimport moment from 'moment';\n\nconst RecoveredToday = ({data}) => (\n    <div style={{ width: \"100%\", height: 400 }}>\n      <ResponsiveContainer>\n          <LineChart width={500} height={300} data={data} margin={{ top: 20, right: 60, left: 30, bottom: 0 }}>\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"report_date\" />\n            <YAxis />\n            <Legend verticalAlign=\"top\" height={36}/>\n            <Line name=\"Günlük sağalanların sayı\" type=\"recovered_today\" dataKey=\"recovered_today\" stroke=\"#664434\" />\n            <Tooltip \n              wrapperStyle={{ backgroundColor: \"red\" }}\n              labelStyle={{ color: \"green\" }}\n              itemStyle={{ color: \"#664434\" }}\n              formatter={function(value, name) {\n                return `${value}`;\n              }}\n              labelFormatter={function(value) {\n                return `Tarix: ${moment(value).format('DD.MM.YYYY')}`;\n              }}\n            />\n          </LineChart>\n      </ResponsiveContainer>\n    </div>\n)\n\nexport default RecoveredToday;","import { LineChart, Line, CartesianGrid, XAxis, YAxis,Tooltip, Legend,ResponsiveContainer } from 'recharts';\nimport moment from 'moment';\n\nconst ActiveCases = ({data}) => (\n    <div style={{ width: \"100%\", height: 400 }}>\n      <ResponsiveContainer>\n          <LineChart width={500} height={300} data={data} margin={{ top: 20, right: 60, left: 30, bottom: 0 }}>\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"report_date\" />\n            <YAxis />\n            <Legend verticalAlign=\"top\" height={36}/>\n            <Line name=\"Aktiv xəstələrin sayı\" type=\"active_cases\" dataKey=\"active_cases\" stroke=\"#664434\" />\n            <Tooltip \n              wrapperStyle={{ backgroundColor: \"red\" }}\n              labelStyle={{ color: \"green\" }}\n              itemStyle={{ color: \"#664434\" }}\n              formatter={function(value, name) {\n                return `${value}`;\n              }}\n              labelFormatter={function(value) {\n                return `Tarix: ${moment(value).format('DD.MM.YYYY')}`;\n              }}\n            />\n          </LineChart>\n      </ResponsiveContainer>\n    </div>\n)\n\nexport default ActiveCases;","import {useEffect, useState} from 'react';\n//Components\nimport InfectedAll from './InfectedAll';\nimport InfectedToday from './InfectedToday';\nimport RecoveredAll from './RecoveredAll';\nimport DeathsAll from  './DeathsAll';\nimport TestsAll from './TestsAll';\nimport TestsToday from './TestsToday';\nimport DeathsToday from './DeathsToday';\nimport RecoveredToday from './RecoveredToday';\nimport ActiveCases from './ActiveCases';\nimport axios from 'axios';\n\nconst App = () => {\n  const [chartData, setChartData] = useState([]);\n\n  const fetchData = async () => {\n    try {\n      let response = await axios.get('https://covid19-azerbaijan.ahmcho.com/api/cases/all');\n      setChartData(response.data);\n      localStorage.setItem('data', JSON.stringify(response.data));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  useEffect(() =>{\n    if(localStorage.getItem('data') === null){\n      fetchData();\n    } else {\n      setChartData(JSON.parse(localStorage.getItem('data')));\n    }\n  },[]);\n\n  return(\n    <>\n      <InfectedAll data={chartData} />\n      <InfectedToday data={chartData} />\n      <RecoveredAll data={chartData} />\n      <RecoveredToday data={chartData} />\n      <ActiveCases data={chartData} />\n      <DeathsAll data={chartData} />\n      <DeathsToday data={chartData} />\n      <TestsAll data={chartData} />\n      <TestsToday data={chartData} />\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}